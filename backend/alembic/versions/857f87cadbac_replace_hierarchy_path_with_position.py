"""replace_hierarchy_path_with_position

Revision ID: 857f87cadbac
Revises: 975b8ebaed9e
Create Date: 2025-08-29 00:01:52.870771

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '857f87cadbac'
down_revision: Union[str, None] = '975b8ebaed9e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    from sqlalchemy import text
    connection = op.get_bind()
    
    # Check if position column already exists (skip if it does)
    try:
        # Step 1: Add position column with default value (NOT NULL) - skip if exists
        op.add_column('paper_sections', sa.Column('position', sa.Integer(), nullable=False, server_default='1'))
    except Exception:
        # Column already exists, continue with data population
        pass
    
    # Step 2: Populate position from hierarchy_path order
    connection.execute(text("""
        WITH ranked_sections AS (
            SELECT id,
                   paper_id,
                   ROW_NUMBER() OVER (PARTITION BY paper_id ORDER BY hierarchy_path) as new_position
            FROM paper_sections 
            WHERE is_deleted = 0
        )
        UPDATE paper_sections 
        SET position = ranked_sections.new_position
        FROM ranked_sections 
        WHERE paper_sections.id = ranked_sections.id
    """))
    
    # Step 4-6: Use batch mode for SQLite constraints and column operations
    with op.batch_alter_table('paper_sections') as batch_op:
        # Drop old constraints and indexes
        batch_op.drop_constraint('uq_paper_hierarchy', type_='unique')
        batch_op.drop_index('idx_paper_sections_paper_hierarchy')
        batch_op.drop_index('ix_paper_sections_hierarchy_path')
        
        # Drop hierarchy_path column
        batch_op.drop_column('hierarchy_path')
        
        # Create new position constraints and indexes
        batch_op.create_unique_constraint('uq_paper_position', ['paper_id', 'position'])
        batch_op.create_index('idx_paper_sections_paper_position', ['paper_id', 'position'], unique=False)
        batch_op.create_index('ix_paper_sections_position', ['position'], unique=False)
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    from sqlalchemy import text
    connection = op.get_bind()
    
    # Step 1: Add hierarchy_path column back as nullable
    with op.batch_alter_table('paper_sections') as batch_op:
        batch_op.add_column(sa.Column('hierarchy_path', sa.VARCHAR(length=50), nullable=True))
    
    # Step 2: Populate hierarchy_path from position (before dropping position column)
    connection.execute(text("""
        UPDATE paper_sections 
        SET hierarchy_path = PRINTF('%03d', position)
        WHERE position IS NOT NULL
    """))
    
    # Step 3: Make hierarchy_path NOT NULL - needs to be done after data population
    with op.batch_alter_table('paper_sections') as batch_op:
        batch_op.alter_column('hierarchy_path', nullable=False)
    
    # Step 4-6: Drop position and create hierarchy_path constraints
    with op.batch_alter_table('paper_sections') as batch_op:
        # Drop position constraints and indexes
        batch_op.drop_constraint('uq_paper_position', type_='unique')
        batch_op.drop_index('ix_paper_sections_position')
        batch_op.drop_index('idx_paper_sections_paper_position')
        
        # Drop position column
        batch_op.drop_column('position')
        
        # Create back hierarchy_path constraints and indexes
        batch_op.create_unique_constraint('uq_paper_hierarchy', ['paper_id', 'hierarchy_path'])
        batch_op.create_index('ix_paper_sections_hierarchy_path', ['hierarchy_path'], unique=False)
        batch_op.create_index('idx_paper_sections_paper_hierarchy', ['paper_id', 'hierarchy_path'], unique=False)
    
    # ### end Alembic commands ###
