"""
сЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕу«АуљєсѓхсЃ╝сЃЊсѓ╣

у░АТўЊсЃЄсЃбућесЂФтЏ║т«џсЃЉсѓ╣сЃ»сЃ╝сЃЅ (demo/demo) сЂДсѓбсѓ»сѓ╗сѓ╣тЈ»УЃйсЂф
сЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕсѓњу«АуљєсЂЌсЂЙсЂЎсђѓ
"""
import secrets
import string
import logging
from typing import Optional, Tuple
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from app.infrastructure.database.models import UserModel
from app.core.config import get_settings
from app.core.security import get_password_hash


logger = logging.getLogger(__name__)


class DemoAccountService:
    """сЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕу«АуљєсѓхсЃ╝сЃЊсѓ╣"""
    
    DEMO_USERNAME = "demo"
    DEMO_PASSWORD = "demo"  # тЏ║т«џсЃЉсѓ╣сЃ»сЃ╝сЃЅ
    DEMO_EMAIL = "demo@vectormindstudio.local"
    DEMO_FULL_NAME = "Demo User"
    
    
    @staticmethod
    async def create_or_update_demo_account(db: AsyncSession) -> Tuple[str, str]:
        """
        сЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕсѓњСйюТѕљсЂЙсЂЪсЂ»ТЏ┤Тќ░
        
        Returns:
            Tuple[str, str]: (username, password)
        """
        settings = get_settings()
        
        # жќІуЎ║уњ░тбЃсЂДсЂ«сЂ┐т«ЪУАї№╝ѕТюгуЋфуњ░тбЃсЂДсЂ»уёАті╣тїќ№╝Ѕ
        if not settings.DEBUG and hasattr(settings, 'ENVIRONMENT') and settings.ENVIRONMENT == 'production':
            logger.warning("сЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕТЕЪУЃйсЂ»ТюгуЋфуњ░тбЃсЂДсЂ»уёАті╣тїќсЂЋсѓїсЂдсЂёсЂЙсЂЎ")
            return None, None
        
        # тЏ║т«џсЃЉсѓ╣сЃ»сЃ╝сЃЅсѓњСй┐уће
        password = DemoAccountService.DEMO_PASSWORD
        hashed_password = get_password_hash(password)
        
        # ТЌбтГўсЂ«сЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕсѓњуб║УфЇ
        stmt = select(UserModel).where(UserModel.username == DemoAccountService.DEMO_USERNAME)
        result = await db.execute(stmt)
        demo_user = result.scalar_one_or_none()
        
        if demo_user:
            # ТЌбтГўсѓбсѓФсѓдсЃ│сЃѕсЂ«сЃЉсѓ╣сЃ»сЃ╝сЃЅсЂесЃГсЃ╝сЃФТЏ┤Тќ░
            demo_user.hashed_password = hashed_password
            demo_user.is_verified = True  # сЃЉсѓ╣сЃ»сЃ╝сЃЅтцЅТЏ┤СИЇУдЂ
            demo_user.roles = ["user"]  # сЃГсЃ╝сЃФсѓњТГБсЂЌсЂЈУеГт«џ
            logger.info(f"сЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕ '{DemoAccountService.DEMO_USERNAME}' сѓњТЏ┤Тќ░сЂЌсЂЙсЂЌсЂЪ")
        else:
            # Тќ░УдЈсЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕСйюТѕљ
            demo_user = UserModel(
                id=f"demo-{secrets.token_hex(8)}",
                username=DemoAccountService.DEMO_USERNAME,
                email=DemoAccountService.DEMO_EMAIL,
                full_name=DemoAccountService.DEMO_FULL_NAME,
                hashed_password=hashed_password,
                is_active=True,
                is_verified=True,  # сЃЉсѓ╣сЃ»сЃ╝сЃЅтцЅТЏ┤СИЇУдЂ
                roles=["user"]
            )
            db.add(demo_user)
            logger.info(f"Тќ░сЂЌсЂёсЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕ '{DemoAccountService.DEMO_USERNAME}' сѓњСйюТѕљсЂЌсЂЙсЂЌсЂЪ")
        
        await db.commit()
        
        # сЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕТЃЁта▒сѓњсЃГсѓ░тЄ║тіЏ
        logger.info("=" * 50)
        logger.info("­Ъј» сЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕТЃЁта▒")
        logger.info(f"   сЃдсЃ╝сѓХсЃ╝тљЇ: {DemoAccountService.DEMO_USERNAME}")
        logger.info(f"   сЃЉсѓ╣сЃ»сЃ╝сЃЅ: {DemoAccountService.DEMO_PASSWORD}")
        logger.info("=" * 50)
        
        return DemoAccountService.DEMO_USERNAME, DemoAccountService.DEMO_PASSWORD
    
    @staticmethod
    async def get_demo_credentials(db: AsyncSession) -> Optional[Tuple[str, str]]:
        """
        сЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕсЂ«УфЇУе╝ТЃЁта▒сѓњтЈќтЙЌ№╝ѕсЃЋсЃГсЃ│сЃѕсѓесЃ│сЃЅуће№╝Ѕ
        Т│еТёЈ: сЃЉсѓ╣сЃ»сЃ╝сЃЅсЂ»У┐ћсЂЋсЂџсђЂтГўтюеуб║УфЇсЂ«сЂ┐
        """
        stmt = select(UserModel).where(UserModel.username == DemoAccountService.DEMO_USERNAME)
        result = await db.execute(stmt)
        demo_user = result.scalar_one_or_none()
        
        if demo_user:
            return DemoAccountService.DEMO_USERNAME, DemoAccountService.DEMO_EMAIL
        return None
    
    @staticmethod
    def is_demo_account(username: str) -> bool:
        """сЃЄсЃбсѓбсѓФсѓдсЃ│сЃѕсЂІсЂЕсЂєсЂІсѓњтѕцт«џ"""
        return username == DemoAccountService.DEMO_USERNAME
    
    @staticmethod
    def requires_password_change(user: UserModel) -> bool:
        """сЃЉсѓ╣сЃ»сЃ╝сЃЅтцЅТЏ┤сЂїт┐ЁУдЂсЂІсЂЕсЂєсЂІсѓњтѕцт«џ"""
        # тЏ║т«џсЃЉсѓ╣сЃ»сЃ╝сЃЅсѓњСй┐ућесЂЎсѓІсЂЪсѓЂтИИсЂФFalse
        return False